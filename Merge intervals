Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        // Use a dynamic list to store the merged intervals
        int[][] merged = new int[intervals.length][2];
        int idx = 0;

        for (int i = 0; i < intervals.length; i++) {
            // If the list is empty or there's no overlap, add the interval
            if (idx == 0 || merged[idx - 1][1] < intervals[i][0]) {
                merged[idx++] = intervals[i];
            } else {
                // Otherwise, merge the current interval with the previous one
                merged[idx - 1][1] = Math.max(merged[idx - 1][1], intervals[i][1]);
            }
        }

        // Return only the merged part of the array
        return Arrays.copyOf(merged, idx);
    }
}
