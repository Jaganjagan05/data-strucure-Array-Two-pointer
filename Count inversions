Given an array of integers arr[]. Find the Inversion Count in the array.
Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.
Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.
Constraints:
1 â‰¤ arr.size() â‰¤ 105
1 â‰¤ arr[i] â‰¤ 104

class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        int n = arr.length;
        int[] tempArr = new int[n];
        return mergeSortAndCount(arr, tempArr, 0, n - 1);
    }

    // Function to recursively sort and count inversions.
    private static int mergeSortAndCount(int[] arr, int[] tempArr, int left, int right) {
        int invCount = 0;
        if (left < right) {
            int mid = (left + right) / 2;

            // Count inversions in the left subarray
            invCount += mergeSortAndCount(arr, tempArr, left, mid);
            // Count inversions in the right subarray
            invCount += mergeSortAndCount(arr, tempArr, mid + 1, right);
            // Count split inversions
            invCount += mergeAndCount(arr, tempArr, left, mid, right);
        }
        return invCount;
    }

    // Function to merge two subarrays and count inversions.
    private static int mergeAndCount(int[] arr, int[] tempArr, int left, int mid, int right) {
        int i = left; // Starting index for left subarray
        int j = mid + 1; // Starting index for right subarray
        int k = left; // Starting index to store sorted array
        int invCount = 0;

        // Merge the two subarrays
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                tempArr[k++] = arr[i++];
            } else {
                // Count inversions
                tempArr[k++] = arr[j++];
                invCount += (mid - i + 1);
            }
        }

        // Copy the remaining elements of the left subarray, if any
        while (i <= mid) {
            tempArr[k++] = arr[i++];
        }

        // Copy the remaining elements of the right subarray, if any
        while (j <= right) {
            tempArr[k++] = arr[j++];
        }

        // Copy the sorted subarray back into the original array
        for (i = left; i <= right; i++) {
            arr[i] = tempArr[i];
        }

        return invCount;
    }

    // Main method for testing
}
